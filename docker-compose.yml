version: "3"
networks:
  web:
    external: true
services:
  db:
    image: postgres:13-alpine
    #    command: bash -c "alembic revision --autogenerate -m "New Migration" && alembic upgrade head"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - web

  #    pgadmin:
  #      image: dpage/pgadmin4
  #      environment:
  #        - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
  #        - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
  #      ports:
  #        - 5050:80
  #      depends_on:
  #        - db
#  traefik:
#    image: "traefik:v2.9"
#    container_name: "traefik"
#    ports:
#      - "80:80"
#      - "443:443"
#      - "8080:8080"
#    command:
#      #- "--log.level=DEBUG"
#      - "--api.insecure=true"
#      - "--providers.docker=true"
#      - "--providers.docker.exposedbydefault=false"
#      - "--providers.docker.network=web"
#      - "--entrypoints.web.address=:80"
#      - "--entrypoints.websecure.address=:443"
#      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
#      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
#      - "--certificatesresolvers.myresolver.acme.email=YOUR EMAIL"
#      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
#        # Enable the Dashboard and API
#      - --api
#    labels:
#      - "traefik.http.routers.web.entrypoints=web"
#      - "traefik.http.services.web.loadbalancer.server.port=8000"
#    networks:
#      - web
#
#    volumes:
#      - "./letsencrypt:/letsencrypt"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  web:
    build: .
    command: bash -c "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - .:/fastapi_celery
    ports:
      - 8000:8000
    restart: always
    env_file:
      - ./.env
    depends_on:
      - db
      - celery_worker
      - rabbitmq
    expose:
      - 8000
    networks:
      - web
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.services.web.loadbalancer.server.port=8000"
#      - "traefik.http.routers.web.rule=Host(`YOUR DOMAIN)"
#      - "traefik.http.routers.web.entrypoints=websecure"
#      - "traefik.http.routers.web.tls.certresolver=myresolver"
  rabbitmq:
    image: "rabbitmq:3.9.11-management"
    ports:
      - "4360:4360"
      - "5672:5672"
      - "25672:25672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/bitnami
    #      - /bitnami
    depends_on:
      - db
    networks:
      - web
  celery_worker:
    container_name: celery_worker
    build: .
    command: celery -A worker.celery_worker worker -l info -Q test-queue
    volumes:
      - .:/fastapi_celery
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - db
      - rabbitmq
    networks:
      - web


  flower:
    container_name: flower
    build: .
    command: celery -A worker.celery_worker flower --port=5555 -l info -Q test-queue
    ports:
      - 5555:5555
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - rabbitmq
      - celery_worker
    networks:
      - web
volumes:
#  letsencrypt:
  postgres_data:
  rabbitmq_data:
    driver: local